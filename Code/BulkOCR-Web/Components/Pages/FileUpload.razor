@page "/file-upload"
@rendermode InteractiveServer

<PageTitle>File Upload</PageTitle>

<h1>File Upload</h1>


@*From web*@
@*https://learn.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-8.0*@

<p>
    <label>
        Max file size: @maxFileSize bytes
        @*<input type="number" @bind="maxFileSize" />*@
    </label>
    <br />
    <label>
        Max allowed files: @maxAllowedFiles
        @*<input type="number" @bind="maxAllowedFiles" />*@
    </label>
</p>

<p>
    <label>
        Please select which files you'd like to upload
        <br />
        @*<InputFile multiple />*@
        @*<InputFile OnChange="LoadFiles" multiple />*@
        <InputFile OnChange="ErrorCheck" multiple />
    </label>
</p>

@if (uploadError)
{
    <h1>The maximum number of allowed files was exceeded.</h1>
}
else
{
    @if (isLoading)
    {
        <p>Uploading...</p>
    }
    else
    {
        <ul>
            @foreach (var file in loadedFiles)
            {
                <li>
                    <ul>
                        <li>Name: @file.Name</li>
                        <li>Last modified: @file.LastModified.ToString()</li>
                        <li>Size (bytes): @file.Size</li>
                        <li>Content type: @file.ContentType</li>
                    </ul>
                </li>
            }
        </ul>
    }
}


@*<button class="btn btn-primary" onclick=LoadFiles>Load Files</button>*@



@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 150;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private bool uploadError;

    private void ErrorCheck(InputFileChangeEventArgs e)
    {
        if(e.FileCount > maxAllowedFiles)
        {
            uploadError = true;
            
        }
        else
        {
            uploadError = false;
            LoadFiles(e);
        }

        @*throw new InvalidOperationException($"{e.FileCount} files uploaded, but {maxAllowedFiles} allowed.");*@
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {

        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                @*
                Logger.LogError("File: {FileName} Error: {Error}",
                    file.Name, ex.Message);
                *@
            }
        }

        isLoading = false;
    }
}


@* Input field *@
@*<input type="file" multiple >*@
@*
<br/>

<button class="btn btn-primary" @onclick="LoadFiles">Load Files</button>


@code {



    private int currentCount = 0;

    private async void LoadFiles()
    {
        await using FileStream fs = new(path, FileMode.Create);
        await browserFile.OpenReadStream().CopyToAsync(fs);
        currentCount++;
    }
}
*@
