@rendermode InteractiveServer
@inject IWebHostEnvironment WebHotEnv

@*@implements IDisposable*@

<div class="text-center">
    <p>Please select images to upload.</p>
    <br />
    <p>
        Accepted types are .jpeg, .jpg, .tiff, and .png.
    </p>
</div>
<br />
<br />
<div class="text-center">
@*adding the key word multiple allows multiple files to be selected*@
<InputFile OnChange="LoadFiles" multiple hidden="@hiddenInput"></InputFile>
</div>

@*https://learn.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-8.0*@

<br />
<ul>
    @if (showProgress)
    {
        <ProgressBarComponent progressPercent="@progressPercent"></ProgressBarComponent>
    }

    @if (fileLoaded)
    {
        @foreach (ImageFile file in imageFiles2)
        {
            <FileDetailsComponent File="@file"></FileDetailsComponent>
            <br />
            @*TODO: Make dropdowns or buttons or something to improve appearance of results*@
            <ConvertedText ImagePath="@file.FilePath"></ConvertedText>
            @*TODO: Remove files from server when completed*@
        }
    }

</ul>
<div class="text-center">
    <button class="btn btn-primary" type="reset" @onclick="Reset">Reset</button>
    <br />
    @*@tess.AppStart()*@
</div>


@code {
    private double totalCount;
    private double progressCount;
    private double progressPercent;
    private bool showProgress = false;
    private long maxAllowedSize = 2147483647;

    private string? _uploadedImageUrl;

    private bool fileLoaded = false;

    //private Tess tess = new Tess();
    private bool hiddenInput;

    private static readonly HashSet<string> _imageExtensions = new HashSet<string>(
        [".jpg", 
    ".jpeg", 
    ".tiff",
    ".png"], StringComparer.OrdinalIgnoreCase);

    //private List<IBrowserFile> imageFiles = new ();

    private List<ImageFile> imageFiles2 = new();

    private string folderPath = string.Empty;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        imageFiles2.Clear();

        showProgress = true;

        if(e != null)
        {
            hiddenInput = true;

            //get a count of number of files selected
            totalCount = e.FileCount;

            foreach (var i in e.GetMultipleFiles())
            {
                progressCount++;
                progressPercent = (progressCount / totalCount) * 100;
                StateHasChanged();
                //string ext = Path.GetExtension(i.Name);
                //string ext = i.Name.Substring(i.Name.LastIndexOf("."));
                ImageFile img = new ImageFile(i);

                //add files to list
                //imageFiles.Add(image);
                imageFiles2.Add(img);

                //load file to server
                await UploadFile(i, img);
            }
        }
    }

    public async Task UploadFile(IBrowserFile file, ImageFile imageFile){
        folderPath = Path.Combine(WebHotEnv.WebRootPath, "uploads");
        Directory.CreateDirectory(folderPath);

        var filePath = Path.Combine(folderPath, file.Name);

        try
        {
            await using FileStream fs = new FileStream(filePath, FileMode.Create);
            var browserFile = file.OpenReadStream(maxAllowedSize);
            await browserFile.CopyToAsync(fs);

            /*using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                using var uploadedFileStream = file.OpenReadStream();
                await uploadedFileStream.CopyToAsync(fileStream); */

            if (_imageExtensions.Contains(imageFile.Extension))
            {
                _uploadedImageUrl = $"/uploads/{file.Name}";
                imageFile.FilePath = filePath;
                //imageFile.FilePath = $"/uploads/{file.Name}";

                fileLoaded = true;
                if(progressCount == totalCount)
                {
                    showProgress = false;
                }
                StateHasChanged();

                //TODO: Update webpage with file name after it's saved
            }
            //}
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Reset()
    {
        //clear selected files
        imageFiles2.Clear();

        //clear listed files
        hiddenInput = false;

        //hide file details
        fileLoaded = false;

        showProgress = false;

        progressCount = 0;
        totalCount = 0;
        progressPercent = 0;


        Directory.Delete(folderPath, true);

        StateHasChanged();

    }
    //TODO: Delete uploads folder when application closes without pushing Reset button

    //public void Dispose()
    //{
    //    Directory.Delete(folderPath, true);
    //}

    
}
