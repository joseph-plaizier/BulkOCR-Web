@rendermode InteractiveServer
@inject IWebHostEnvironment WebHotEnv

<div class="text-center">
    <p>Please select images to upload.</p>
    <br />
    <p>
        Accepted types are .jpeg, .jpg, .tiff, and .png.
    </p>
</div>
<br />
<br />
<div class="text-center">
@*adding the key word multiple allows multiple files to be selected*@
<InputFile OnChange="LoadFiles" multiple hidden="@hiddenInput"></InputFile>
</div>

@*https://learn.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-8.0*@

<br />
<ul>
    @foreach (var file in imageFiles2)
    {
        <FileDetailsComponent File="@file"></FileDetailsComponent>
        <br />
        @*TODO: wait for image file path to be saved to object before rendering the ConvertedText component*@
        @*<ConvertedText ImagePath="@file.Name"></ConvertedText>*@
    }
</ul>
<div class="text-center">
    <button class="btn btn-primary" type="reset" @onclick="Reset">Reset</button>
    <br />
    @tess.AppStart()
</div>


@code {
    private string? _uploadedImageUrl;

    private Tess tess = new Tess();
    private bool hiddenInput;

    private static readonly HashSet<string> _imageExtensions = new HashSet<string>(
        [".jpg", 
    ".jpeg", 
    ".tiff",
    ".png"], StringComparer.OrdinalIgnoreCase);

    private List<IBrowserFile> imageFiles = new ();

    private List<ImageFile> imageFiles2 = new();

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        imageFiles2.Clear();

        if(e != null)
        {
            //hiddenInput = true;

            foreach (var i in e.GetMultipleFiles())
            {



                string ext = i.Name.Substring(i.Name.LastIndexOf("."));
                ImageFile img = new ImageFile(
                    i.Name, 
                    i.Size, 
                    i.LastModified, 
                    i.ContentType, 
                    ext) ;


                //add files to list
                //imageFiles.Add(image);
                imageFiles2.Add(img);

                //load file to server
                UploadFile(i, img);
            }
        }
    }

    private void Reset()
    {
        //clear selected files
        imageFiles2.Clear();

        //clear listed files
        hiddenInput = false;
    }

    public async Task UploadFile(IBrowserFile file, ImageFile imageFile){
        var folderPath = Path.Combine(WebHotEnv.WebRootPath, "uploads");
        Directory.CreateDirectory(folderPath);

        var filePath = Path.Combine(folderPath, file.Name);

        try
        {
            await using FileStream fs = new FileStream(filePath, FileMode.Create);
            var browserFile = file.OpenReadStream();
            await browserFile.CopyToAsync(fs);

            /*using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                using var uploadedFileStream = file.OpenReadStream();
                await uploadedFileStream.CopyToAsync(fileStream); */

                var extension = Path.GetExtension(file.Name);

                if (_imageExtensions.Contains(extension))
                {
                    _uploadedImageUrl = $"/uploads/{file.Name}";
                    imageFile.FilePath = $"/uploads/{file.Name}";

                    //TODO: Update webpage with file name after it's saved
                }
            //}
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
